install.packages("tidyverse")
library(lubridate)
setwd("C:/Users/Minh Thang/Desktop/Aptech - AI and Data/R/buoi02")
# Imagine that you are working for the Ghostbusters,
# and for safety reasons you are recording the height and weight
# for everyone or everything the team encounters.
# So far you have collected information about the following.
# entities: Dr Peter Venkman, Dr Raymond Stantz, Dr. Eagon Spengler, Dana Barrett, Vigo, Slimer, and the Marshmallow Man.
enitties <- c("Dr Peter Venkman", "Dr Raymond Stantz","Dr. Eagon Spengler", "Dana Barrett","Vigo", "Slimer", "the Marshmallow Man")
# A vector called weight, storing the values: 71, 67, 83, 67
weight = c(71, 67, 83, 67)
# A vector called weight, storing the values: 71, 67, 83, 67
weight <- c(71, 67, 83, 67)
# A vector called height, storing the values: 1.75, 1.81, 1.78, 1.82, 1.97, 2.12, 2.75
height <- c(1.75, 1.81, 1.78, 1.82, 1.97, 2.12, 2.75)
# You need to calculate the BMI for all you have data for.
# BMI is calculated by dividing the weight in kg by the height in meters squared.
bmi <- weight / height*height
# You need to calculate the BMI for all you have data for.
# BMI is calculated by dividing the weight in kg by the height in meters squared.
bmi <- weight/(height*height)
# Try printing your bmi variable.
pring(bmi)
# Try printing your bmi variable.
print(bmi)
# Requirements: the following vectors: the original cards object,
# and atk from the second exercise.
cards <- c("Blue-Eyes White Dragon", "Exodius", "The Winged Dragon of Ra", "Raigeki", "Slifer the Sky Dragon", "Obelisk the Tormentor", "Black Luster Soldier", "5-Headed Dragon", "Exodia the Forbidden One", "Dragon Master Knight")
atk <- c(3000, NA, NA, NA, NA, 4000, 3000, 5000, 1000, 5000)
# Assign a name to each element from the atk vector that corresponds to a character from the cards vector.
names(atk) <- cards
# Check the attributes of the atk element.
print(atk)
# Check the attributes of the atk element.
atb(atk)
# Check the attributes of the atk element.
attributes(atk)
# Is there another command you can use to check if the atk object has names assigned to it?
names(atk)
# Remove the names.
name(atk) <- NULL
# Remove the names.
names(atk) <- NULL
# Can you think of another way to assign names to the atk object?
atk <- setNames(atk, cards)
#The 6-th value (can you do it in more than one way)
atk[6]
atk["Obelisk the Tormentor"]
#All the values but the 2nd one
atk[-2]
#Values 1, 3, 5, 7, and 9
atk[c(1, 3, 5, 7,9)]
#All the values but the 4th, 5th, and 6th
atk[-c(4,5,6)]
#All the values larger than 2000
atk[atk>2000]
#All the values larger than 2000
atk[atk>2000 & !is.na(atk)]
source("C:/Users/Minh Thang/Desktop/Aptech - AI and Data/R/buoi02/4.7 Exercise.R", echo=TRUE)
# Create a vector s that stores the number
# sequence 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30.
# Use the seq() command to do that.
s <- seq(2, 30, by = 2)
# Check the attributes of s.
attributes(s)
class(s)
# Give it dimensions. Try specifying 3 rows and 5 columns.
dim(s) <- c(3)
# Give it dimensions. Try specifying 3 rows and 5 columns.
dim(s) <- c(3,5)
View(s)
dim(s)
# Create a vector s that stores the number
# sequence 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30.
# Use the seq() command to do that.
s <- seq(2, 30, by = 2)
dim(s)
# What happens if we try to go beyond the traditional height and width properties and specify a value for depth, too. Let's create a hypercube that has 1 row, 3 columns and 5 "slices".
dim(s) <- c(1,3,5)
# Give it dimensions. Try specifying 3 rows and 5 columns.
dim(s) <- c(3,5)
View(s)
# What happens if we try to go beyond the traditional height and width properties and specify a value for depth, too. Let's create a hypercube that has 1 row, 3 columns and 5 "slices".
dim(s) <- c(1,3,5)
# Give it dimensions. Try specifying 3 rows and 5 columns.
dim(s) <- c(3,5)
# What happens if we try to go beyond the traditional height and width properties and specify a value for depth, too. Let's create a hypercube that has 1 row, 3 columns and 5 "slices".
dim(s) <- c(1,3,5)
# What happens if we try to go beyond the traditional height and width properties
# and specify a value for depth, too.
# Let's create a hypercube that has 1 row, 3 columns and 5 "slices".
dim(s) <- c(1,3,5)
print(s)
# Can you do more than that? Do you think this could be useful for something?
dim(s) <- c(1,1,3,5)
print(s)
# Hint. Use the dim() function, the matrix() function, and cbind().
Player <- c("dark","dark","dark","dark","dark","light","light","light","light","light")
piece <- c("king", "queen", "pawn", "pawn", "knight", "bishop", "king", "rook", "pawn", "pawn")
chess1 <- cbind(Player, piece)
print(chess1)
chess2 <- c("dark","dark","dark","dark","dark","light","light","light","light","light","king", "queen", "pawn", "pawn", "knight", "bishop", "king", "rook", "pawn", "pawn")
dim(chess2) <- c(10,2)
dim(chess2) <- c(10,2)
print(chess2)
rawData <- c("dark","dark","dark","dark","dark","light","light","light","light","light","king", "queen", "pawn", "pawn", "knight", "bishop", "king", "rook", "pawn", "pawn")
chess3 <- (rawData, ncol = 2)
chess3 <- (data =rawData, ncol = 2)
chess3 <- (data =rawData, ncol = 2)
chess3 <- (data =c("dark","dark","dark","dark","dark","light","light","light","light","light","king", "queen", "pawn", "pawn", "knight", "bishop", "king", "rook", "pawn", "pawn"), ncol = 2)
chess3 <- matrix(data =rawData, ncol = 2)
print(chess3)
# Assign names to it in two different ways.
colnames(chess3) <- c("Player", "Piece")
print(chess3)
names(chess2) <- c("Player", "Piece")
print(chess2)
print(chess2)
chess2 <- c("dark","dark","dark","dark","dark","light","light","light","light","light","king", "queen", "pawn", "pawn", "knight", "bishop", "king", "rook", "pawn", "pawn")
dim(chess2) <- c(10,2)
print(chess2)
dimnames(chess2) <- c("Player", "Piece")
dimnames(chess2) = list(NULL, c("Player", "Piece"))
print(chess2)
# Create vectors for player and piece information
player <- c("dark", "dark", "dark", "dark", "dark", "light", "light", "light", "light", "light")
piece <- c("king", "queen", "pawn", "pawn", "knight", "bishop", "king", "rook", "pawn", "pawn")
# Create 10 small vectors, one for each row of the matrix
row1 <- c(player[1], piece[1])
row2 <- c(player[2], piece[2])
row3 <- c(player[3], piece[3])
row4 <- c(player[4], piece[4])
row5 <- c(player[5], piece[5])
row6 <- c(player[6], piece[6])
row7 <- c(player[7], piece[7])
row8 <- c(player[8], piece[8])
row9 <- c(player[9], piece[9])
row10 <- c(player[10], piece[10])
# Combine the 10 small vectors using rbind() to create the matrix
chess_matrix <- rbind(row1, row2, row
print(chess_matrix)
print(chess_matrix)
source("C:/Users/Minh Thang/Desktop/Aptech - AI and Data/R/buoi02/5.2 Exercise.R", echo=TRUE)
