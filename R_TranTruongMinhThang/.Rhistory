x = "knowledge_score",
y = "Frequency") +
theme_minimal()
# Create a frequency distribution plot of knowledge_score
ggplot(canxi, aes(x = knowledge_score)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(title = "Frequency Distribution of knowledge_score",
x = "knowledge_score",
y = "Frequency") +
theme_minimal()
# Create a frequency distribution plot of knowledge_score
ggplot(canxi, aes(x = knowledge_score)) +
geom_histogram(binwidth = 0.8, fill = "steelblue", color = "black") +
labs(title = "Frequency Distribution of knowledge_score",
x = "knowledge_score",
y = "Frequency") +
theme_minimal()
# Create a frequency distribution plot of knowledge_score
ggplot(canxi, aes(x = knowledge_score)) +
geom_histogram(binwidth = 0.6, fill = "steelblue", color = "black") +
labs(title = "Frequency Distribution of knowledge_score",
x = "knowledge_score",
y = "Frequency") +
theme_minimal()
# Create a frequency distribution plot of knowledge_score
ggplot(canxi, aes(x = knowledge_score)) +
geom_histogram(binwidth = 0.1, fill = "steelblue", color = "black") +
labs(title = "Frequency Distribution of knowledge_score",
x = "knowledge_score",
y = "Frequency") +
theme_minimal()
# Create a frequency distribution plot of knowledge_score
ggplot(canxi, aes(x = knowledge_score)) +
geom_histogram(binwidth = 2, fill = "steelblue", color = "black") +
labs(title = "Frequency Distribution of knowledge_score",
x = "knowledge_score",
y = "Frequency") +
theme_minimal()
# Create a frequency distribution plot of knowledge_score
ggplot(canxi, aes(x = knowledge_score)) +
geom_histogram(binwidth = 1.4, fill = "steelblue", color = "black") +
labs(title = "Frequency Distribution of knowledge_score",
x = "knowledge_score",
y = "Frequency") +
theme_minimal()
# Create a frequency distribution plot of knowledge_score
ggplot(canxi, aes(x = knowledge_score)) +
geom_histogram(binwidth = 1.6, fill = "steelblue", color = "black") +
labs(title = "Frequency Distribution of knowledge_score",
x = "knowledge_score",
y = "Frequency") +
theme_minimal()
# Create a frequency distribution plot of knowledge_score
ggplot(canxi, aes(x = knowledge_score)) +
geom_histogram(binwidth = 1.4, fill = "steelblue", color = "black") +
labs(title = "Frequency Distribution of knowledge_score",
x = "knowledge_score",
y = "Frequency") +
theme_minimal()
# Create a frequency distribution plot of knowledge_score
ggplot(canxi, aes(x = knowledge_score)) +
geom_histogram(binwidth = 0.7, fill = "steelblue", color = "black") +
labs(title = "Frequency Distribution of knowledge_score",
x = "knowledge_score",
y = "Frequency") +
theme_minimal()
frequency_knowledge_score <- table(canxi$knowledge_score)
frequency_knowledge_score <- table(canxi$knowledge_score)
print(frequency_knowledge_score)
# Create a frequency distribution plot of knowledge_score
ggplot(canxi, aes(x = knowledge_score)) +
geom_histogram(binwidth = 0.1, fill = "steelblue", color = "black") +
labs(title = "Frequency Distribution of knowledge_score",
x = "knowledge_score",
y = "Frequency") +
theme_minimal()
knowledge_mean <- mean(canxi$knowledge_score)
knowledge_median <- median(canxi$knowledge_score)
knowledge_max <- max(canxi$knowledge_score)
knowledge_min <- min(canxi$knowledge_score)
calcium_mean <- mean(canxi$calcium_intake)
calcium_median <- median(canxi$calcium_intake)
calcium_max <- max(canxi$calcium_intake)
calcium_min <- min(canxi$calcium_intake)
# Print the results
cat("Statistics for knowledge_score:\n")
cat("Mean:", knowledge_mean, "\n")
cat("Median:", knowledge_median, "\n")
cat("Maximum:", knowledge_max, "\n")
cat("Minimum:", knowledge_min, "\n")
house <- read.csv("ames_housing.csv")
calcium_mean <- mean(canxi$calcium_intake)
calcium_median <- median(canxi$calcium_intake)
calcium_max <- max(canxi$calcium_intake)
calcium_min <- min(canxi$calcium_intake)
cat("Statistics for calcium_intake:\n")
cat("Mean:", calcium_mean, "\n")
cat("Median:", calcium_median, "\n")
cat("Maximum:", calcium_max, "\n")
cat("Minimum:", calcium_min, "\n")
# Boxplot for knowledge_score
boxplot(canxi$knowledge_score, main = "Boxplot of knowledge_score")
# Boxplot for knowledge_score
ggplot(canxi, aes(x = "", y = knowledge_score)) +
geom_boxplot() +
labs(title = "Boxplot of knowledge_score")
# Boxplot for calcium_intake
ggplot(canxi, aes(x = "", y = calcium_intake)) +
geom_boxplot() +
labs(title = "Boxplot of calcium_intake")
fruit <- read.table("fruit_data_with_colors.txt", header = TRUE, sep = "\t")
# View the first few rows of the data
head(fruit)
# View the last few rows of the data
tail(fruit)
# Inspect the structure of the data
str(fruit)
# Summarize the data
summary(fruit)
View(fruit)
# Check the data type of the fruit_name column
class(fruit$fruit_name)
fruit$fruit_name <- as.factor(fruit$fruit_name)
# Check the data type of the fruit_subtype column
class(fruit$fruit_subtype)
fruit$fruit_subtype <- as.factor(fruit$fruit_subtype)
# Number of fruit_name types
num_fruit_names <- length(unique(fruit$fruit_name))
cat("Number of fruit_name types:", num_fruit_names, "\n")
# List of fruit_name types
fruit_names <- unique(fruit$fruit_name)
cat("Fruit_name types:", fruit_names, "\n")
# List of fruit_name types
fruit_names <- levels(fruit$fruit_name)
cat("Fruit_name types:", fruit_names, "\n")
# List of fruit_name types
fruit_names <- levels(fruit$fruit_name)
cat("Fruit_name types:", fruit_names, ",")
# List of fruit_name types
fruit_names <- levels(fruit$fruit_name)
cat("Fruit_name types:", fruit_names)
# List of fruit_name types
fruit_names <- levels(fruit$fruit_name)
cat("Fruit_name types:", fruit_names)
# Number of fruit_subtype types
num_fruit_subtypes <- length(unique(fruit$fruit_subtype))
cat("Number of fruit_subtypes types:", num_fruit_subtypes, "\n")
# List of fruit_subtypes types
fruit_subtypes <- levels(fruit$fruit_subtypes)
cat("Fruit_subtype:", fruit_subtypes)
# List of fruit_subtypes types
fruit_subtypes <- levels(fruit$fruit_subtype)
cat("Fruit_subtype:", fruit_subtypes)
# Filter the data where fruit_name is 'apple' into the df_apple dataframe
df_apple <- subset(fruit, fruit_name == 'apple')
# Check the number of rows that satisfy the condition
num_rows <- nrow(df_apple)
# Filter the data where fruit_name is 'apple' into the df_apple dataframe
df_apple <- subset(fruit, fruit_name == 'apple')
# Check the number of rows that satisfy the condition
num_rows <- nrow(df_apple)
print(num_rows)
write.csv(df_apple, file = "apple.csv", row.names = FALSE)
df_golden_delicious <- subset(fruit, fruit_subtype == 'golden_delicious')
# Filter the data where fruit_name is 'apple' into the df_apple dataframe
df_apple <- subset(fruit, fruit_name == 'apple')
# Check the number of rows that satisfy the condition
apple_rows <- nrow(df_apple)
print(apple_rows)
golden_delicious_rows <- nrow(df_golden_delicious)
print(golden_delicious_rows)
install.packages("openxlsx")
library(tidyr)
library(tidyverse)
library(ggplot2)
library(scales)
library(readxl)
library(openxlsx)
```
write.xlsx(df_golden_delicious, file = "golden_delicious.xlsx", row.names = FALSE)
write.xlsx(df_golden_delicious, file = "golden_delicious.xlsx", rowNames = FALSE)
library(xml2)
# Convert the dataframe to XML format
xml_data <- as_xml_document(df_golden_delicious)
# Convert the dataframe to XML format
xml_data <- xml2::as_xml_document(list(df_golden_delicious))
# Convert the dataframe to XML format
xml_data <- xml2::as_xml_document(df_golden_delicious)
# Convert the dataframe to XML format
xml_data <- xml2::as_xml_document(list(df_golden_delicious))
install.packages("XML")
house <- read.csv("ames_housing.csv")
# Convert the dataframe to XML format
xml_data <- xml2::as_xml_document(list(df_golden_delicious))
library(XML)
xml_data <- xmlTree::xmlTree(df_golden_delicious)
summary_fruit_subtype <- fruit %>%
group_by(fruit_subtype) %>%
summarize(count = n(),
max_mass = max(mass),
min_mass = min(mass),
max_width = max(width),
min_width = min(width),
max_height = max(height),
min_height = min(height))
summary_fruit_subtype <- fruit %>%
group_by(fruit_subtype) %>%
summarize(count = n(),
max_mass = max(mass),
min_mass = min(mass),
max_width = max(width),
min_width = min(width),
max_height = max(height),
min_height = min(height))
print(summary_fruit_subtype)
library(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
# Convert the summary data to JSON format
json_data <- toJSON(summary_fruit_subtype, pretty = TRUE)
# Save the JSON data to the 'subtype_summarize.json' file
write(json_data, file = "subtype_summarize.json")
# Read the JSON data from the 'subtype_summarize.json' file
json_data <- fromJSON(file = "subtype_summarize.json")
# Read the JSON data from the 'subtype_summarize.json' file
json_data_read <- readLines("subtype_summarize.json")
# Print the contents of the JSON data
print(json_data)
house <- read.csv("ames_housing.csv")
tail(house)
str(house)
garage_type_counts <- table(house$Garage.Type)
cat("Number of types of Garage.Type:", length(garage_type_counts), "\n")
garage_type_counts
GarageType <- house %>%
group_by(Garage.Type) %>%
summarise(count = n())
house <- read.csv("ames_housing.csv")
GarageType <- house %>%
group_by(Garage.Type) %>%
summarise(count = n())
View(house)
garage_type_counts <- house %>%
group_by(Garage.Type) %>%
summarise(count = n())
library(tidyr)
library(tidyverse)
library(ggplot2)
library(scales)
library(readxl)
library(openxlsx)
```
library(tidyr)
library(tidyverse)
library(scales)
library(readxl)
library(openxlsx)
```
garage_type_counts <- house %>%
group_by(Garage.Type) %>%
summarise(count = n())
garage_type_counts <- table(house$Garage.Type)
garage_type_counts <- house %>%
group_by(Garage.Type) %>%
summarise(count = n())
print(garage_type_counts)
house <- subset(house, select = -c(Garage.Qual, Garage.Cond, Pool.QC, Fence, Misc.Feature))
View(df_golden_delicious)
xml_data <- xml2::as_xml_document(xml2::xml_data_frame(df_golden_delicious, row_name = NULL))
# Create an empty XML document
xml_doc <- xml2::new_xml_document()
library(tidyr)
library(tidyverse)
library(scales)
library(readxl)
library(openxlsx)
```
tail(house)
summary(house)
# number of rows
nrow(house)
# number of columns
ncol(house)
garage_type_counts <- house %>%
group_by(Garage.Type) %>%
summarise(count = n())
print(garage_type_counts)
cat("Number of types of Garage.Type:", length(garage_type_counts), "\n")
house <- subset(house, select = -c(Garage.Qual, Garage.Cond, Pool.QC, Fence, Misc.Feature))
cat("Number of types of Garage.Type:", length(garage_type_counts$Garage.Type), "\n")
house <- subset(house, select = -c(Garage.Qual, Garage.Cond, Pool.QC, Fence, Misc.Feature))
house <- subset(house, select = -c("Garage.Qual", Garage.Cond, Pool.QC, Fence, Misc.Feature))
house <- subset(house, select = -c("Garage.Qual", "Garage.Cond", "Pool.QC", "Fence", "Misc.Feature"))
house <- house %>% select(-c("Garage.Qual", "Garage.Cond", "Pool.QC", "Fence", "Misc.Feature"))
head(house)
tail(house)
house <- read.csv("ames_housing.csv")
garage_type_counts <- house %>%
group_by(Garage.Type) %>%
summarise(count = n())
print(garage_type_counts)
cat("Number of types of Garage.Type:", length(garage_type_counts$Garage.Type), "\n")
house <- house %>%
select(-c("Garage.Qual", "Garage.Cond", "Pool.QC", "Fence", "Misc.Feature"))
result_5 <- house %>%
group_by(Electrical, Heating) %>%
summarize(
max_area = max(Gr.Liv.Area, na.rm =T),
min_area = min(Gr.Liv.Area, na.rm =T)
)
library(ggplot2)
ggplot(house, aes(x = X1st.Flr.SF, y = SalePrice)) +
geom_point() +
labs(x = "First Floor Area (square feet)", y = "Sale Price") +
ggtitle("Relationship between Sale Price and First Floor Area")
# Calculate the percentage
percentage <- house %>%
group_by(Central.Air) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# Create the pie chart
ggplot(percentage, aes(x = "", y = percentage, fill = Central.Air)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(fill = "Central Air", x = NULL, y = NULL, title = "Percentage of Central Air (Y/N)") +
scale_fill_manual(values = c("#FFA500", "#6495ED")) +
theme_void() +
geom_text(aes(label = percent(percentage/100), x = 1.5), color = "black", size = 4, position = position_stack(vjust = 0.5)) +
guides(fill = guide_legend(title = "Central Air"))
# Find the oldest and newest houses
oldest_house <- house %>%
filter(Year.Built == min(Year.Built))
newest_house <- house %>%
filter(Year.Built == max(Year.Built))
# Display the oldest and newest houses with desired columns
oldest_house_info <- oldest_house %>%
select(Id, Year.Built, SalePrice)
print(oldest_house_info)
newest_house_info <- newest_house %>%
select(Id, Year.Built, SalePrice)
print(newest_house_info)
# Find the oldest and newest houses
oldest_house <- house %>%
filter(Year.Built == min(Year.Built))
newest_house <- house %>%
filter(Year.Built == max(Year.Built))
# Display the oldest houses with desired columns
oldest_house_info <- oldest_house %>%
select(Id, Year.Built, SalePrice)
print(oldest_house_info)
# Display the newest houses with desired columns
newest_house_info <- newest_house %>%
select(Id, Year.Built, SalePrice)
print(newest_house_info)
# Find the oldest and newest houses
oldest_house <- house %>%
filter(Year.Built == min(Year.Built))
newest_house <- house %>%
filter(Year.Built == max(Year.Built))
# Display the oldest house with desired columns
oldest_house_info <- oldest_house %>%
select(Id, Year.Built, SalePrice)
print(oldest_house_info)
# Display the newest house with desired columns
newest_house_info <- newest_house %>%
select(Id, Year.Built, SalePrice)
print(newest_house_info)
# Count the number of houses built each year
house_counts <- house %>%
group_by(Year.Built) %>%
summarize(count = n())
# Print the head of the house counts
print(head(house_counts))
# Print the tail of the house counts
print(tail(house_counts))
# Find the year with the highest number of houses built
year_most_houses <- house_counts %>%
filter(count == max(count))
print(year_most_houses)
# Filter for the 10 most recent years
recent_years <- house_counts %>%
filter(Year.Built >= max(Year.Built) - 9)
# Create barplot for the 10 most recent years
ggplot(recent_years, aes(x = as.factor(Year.Built), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Houses Built - 10 Most Recent Years",
x = "Year Built",
y = "Count") +
theme_minimal()
# Create line plot for all years
ggplot(house_counts, aes(x = Year.Built, y = count)) +
geom_line() +
labs(title = "Number of Houses Built - All Years",
x = "Year Built",
y = "Count") +
theme_minimal()
# Create a boxplot of SalePrice
ggplot(house, aes(x = "", y = SalePrice)) +
geom_boxplot(fill = "steelblue", color = "black") +
labs(title = "Boxplot of SalePrice",
y = "Sale Price") +
theme_minimal()
canxi <- read_excel("canxi.xlsx")
# View the first few rows of the data
print(head(canxi))
# View the last few rows of the data
tail(canxi)
# View the structure of the data
str(canxi)
# View summary statistics of the data
summary(canxi)
# Create a frequency distribution plot of knowledge_score
ggplot(canxi, aes(x = knowledge_score)) +
geom_histogram(binwidth = 0.7, fill = "steelblue", color = "black") +
labs(title = "Frequency Distribution of knowledge_score",
x = "knowledge_score",
y = "Frequency") +
theme_minimal()
frequency_knowledge_score <- table(canxi$knowledge_score)
print(frequency_knowledge_score)
# Create a frequency distribution plot of knowledge_score
ggplot(canxi, aes(x = knowledge_score)) +
geom_histogram(binwidth = 0.1, fill = "steelblue", color = "black") +
labs(title = "Frequency Distribution of knowledge_score",
x = "knowledge_score",
y = "Frequency") +
theme_minimal()
knowledge_mean <- mean(canxi$knowledge_score)
knowledge_median <- median(canxi$knowledge_score)
knowledge_max <- max(canxi$knowledge_score)
knowledge_min <- min(canxi$knowledge_score)
calcium_mean <- mean(canxi$calcium_intake)
calcium_median <- median(canxi$calcium_intake)
calcium_max <- max(canxi$calcium_intake)
calcium_min <- min(canxi$calcium_intake)
cat("Statistics for calcium_intake:\n")
cat("Mean:", calcium_mean, "\n")
cat("Median:", calcium_median, "\n")
cat("Maximum:", calcium_max, "\n")
cat("Minimum:", calcium_min, "\n")
# Boxplot for knowledge_score
ggplot(canxi, aes(x = "", y = knowledge_score)) +
geom_boxplot() +
labs(title = "Boxplot of knowledge_score")
# Boxplot for calcium_intake
ggplot(canxi, aes(x = "", y = calcium_intake)) +
geom_boxplot() +
labs(title = "Boxplot of calcium_intake")
fruit <- read.table("fruit_data_with_colors.txt", header = TRUE, sep = "\t")
# View the first few rows of the data
head(fruit)
# View the last few rows of the data
tail(fruit)
# Inspect the structure of the data
str(fruit)
# Summarize the data
summary(fruit)
# Check the data type of the fruit_name column
class(fruit$fruit_name)
fruit$fruit_name <- as.factor(fruit$fruit_name)
# Check the data type of the fruit_subtype column
class(fruit$fruit_subtype)
fruit$fruit_subtype <- as.factor(fruit$fruit_subtype)
# Number of fruit_name types
num_fruit_names <- length(unique(fruit$fruit_name))
cat("Number of fruit_name:", num_fruit_names, "\n")
# List of fruit_name types
fruit_names <- levels(fruit$fruit_name)
cat("Fruit_name:", fruit_names)
# Number of fruit_subtype types
num_fruit_subtypes <- length(unique(fruit$fruit_subtype))
cat("Number of fruit_subtypes:", num_fruit_subtypes, "\n")
# List of fruit_subtypes types
fruit_subtypes <- levels(fruit$fruit_subtype)
cat("Fruit_subtype:", fruit_subtypes)
# Filter the data where fruit_name is 'apple' into the df_apple dataframe
df_apple <- subset(fruit, fruit_name == 'apple')
# Check the number of rows that satisfy the condition
apple_rows <- nrow(df_apple)
print(apple_rows)
write.csv(df_apple, file = "apple.csv", row.names = FALSE)
write.csv(df_apple, file = "apple.csv", row.names = FALSE)
df_golden_delicious <- subset(fruit, fruit_subtype == 'golden_delicious')
golden_delicious_rows <- nrow(df_golden_delicious)
print(golden_delicious_rows)
write.xlsx(df_golden_delicious, file = "golden_delicious.xlsx", rowNames = FALSE)
write.xlsx(df_golden_delicious, file = "golden_delicious.xlsx", rowNames = FALSE)
library(xml2)
# Convert the dataframe to XML format
xml_data <- xml2::as_xml_document(list(df_golden_delicious))
summary_fruit_subtype <- fruit %>%
group_by(fruit_subtype) %>%
summarize(count = n(),
max_mass = max(mass),
min_mass = min(mass),
max_width = max(width),
min_width = min(width),
max_height = max(height),
min_height = min(height))
print(summary_fruit_subtype)
# Install jsonlite package if not already installed
# install.packages("jsonlite")
library(jsonlite)
# Convert the summary data to JSON format
json_data <- toJSON(summary_fruit_subtype, pretty = TRUE)
# Save the JSON data to the 'subtype_summarize.json' file
write(json_data, file = "subtype_summarize.json")
# Read the JSON data from the 'subtype_summarize.json' file
json_data_read <- readLines("subtype_summarize.json")
# Print the contents of the JSON data
print(json_data)
